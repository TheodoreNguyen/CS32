Theodore Nguyen

704-156-701

W2015, CS32, homework 2 - hw.txt




2) output: all of the position coordinates of the stack algorithm

Current position is (6,4).

Current position is (6,3).

Current position is (6,5).

Current position is (7,5).

Current position is (8,5).

Current position is (8,6).

Current position is (8,7).

Current position is (8,8).

Current position is (7,8).

Current position is (6,6).

Current position is (5,4).

Current position is (4,4).

Current position is (4,5).

Current position is (4,6).

Current position is (3,6).

Current position is (3,7).

Current position is (3,8).

Current position is (4,8).

Current position is (5,8).

Current position is (3,4).

Current position is (2,4).

Current position is (1,4).

Current position is (1,3).

Current position is (1,2).

Current position is (1,1).

Solvable!






4) output: all of the position coordinates of the queue algorithm

Current position is (6,4).

Current position is (5,4).

Current position is (6,5).

Current position is (6,3).

Current position is (4,4).

Current position is (6,6).

Current position is (7,5).

Current position is (3,4).

Current position is (4,5).

Current position is (8,5).

Current position is (2,4).

Current position is (4,6).

Current position is (8,6).

Current position is (1,4).

Current position is (3,6).

Current position is (8,7).

Current position is (1,5).

Current position is (1,3).

Current position is (3,7).

Current position is (8,8).

Current position is (1,6).

Current position is (1,2).

Current position is (3,8).

Current position is (7,8).

Current position is (1,7).

Current position is (2,2).

Current position is (1,1).

Solvable!






How do the two algorithms differ from each other? (Hint: how and why do they
visit cells in the maze in a different order?)

-> There is an obvious answer to this problem; obviously, the stack and queue 
algorithms are different!

 

We learned that the "stack" algorithm followed the 
"Last in, first out" methodology. That is, the latest item to be pushed onto 
the stack would be interpreted first. To example this in terms of the maze, 
from the starting position, the algorithm would check the positions North,
East, South, and West spots in that order. Lets say that all four of those
 positions were not discovered and were not a wall. Then, the stack would have
the West, South, East, and North positions, from top to bottom. In the next 
iteration of the loop, we would pop the stack and refer to the "Last in"
 coordinate, the West position, which would be the "first out" to be popped. We 
then check that west position for neighboring areas and the algorithm ends up,
 so to say, following whatever pathway the West position leads us until it 
finds the end, or if there is nowhere to go. In the latter case, the next item 
popped off the stack would be the South position, and the process will repeat 
again. In terms of looking at the maze, the stack approach will, so to 
say, start on a pathway until a dead end, and then go back to the almost
 earliest discovered and repeat the process until it finds the end (or a dead
end, and nothing left on the stack).

 

We learned that the "queue" algorithm followed the "First in, first out 
methodology." Like in a queue or a line, the first item in the queue is out 
and interpreted first. In an analogous case from above, from a starting 
position and reading positions in the order North -> East -> South -> West, 
with all positions undiscovered and open, the queue would look like the same
 as the order which they were read: North is first in line, then East, then 
South, then West. North is first to be popped off and have its surroundings
 analyzed. However, unlike stack, the queue will not, so to say, 'go down a
 corridor til a dead end.' Instead, it will evaluate based on the queue, 
following, in terms of the maze, a sort of check new positions, backtrace to
another coordinate, check new positions, and so on until the queue is empty or 
the end has been found.


